#include "Adafruit_Thermal.h"
#include "SoftwareSerial.h"

#define TX_PIN 6 //Arduino transit YELLOW wire labeled RX on printer
#define RX_PIN 5 //Arduino receive GREEN WIRE labeled TX on printer

SoftwareSerial mySerial(RX_PIN, TX_PIN); //Declare SoftwareSerial object
Adafruit_Thermal printer(&mySerial); //Pass address to printer constructor


//VARIABLES

//hardware
int siren = 2;
int yesButton = 24;
int noButton = 26;

boolean yesButtonPressed = false;
boolean noButtonPressed = false;

String commandString = "";
String failString = "";
char inputString[200];
int printIx = 0;
int printLen = 0;
boolean isCommandString = false;

//METHODS

// this routine reads a "command" - max length = 200;    Paul's protocol : put brackets [] around the command so we can recognize the start and end....
boolean tryReadSerialMsg () {
  char sb;
  boolean msgRcvd = false;
  isCommandString = false;
  int i;
  for (i = 0; i < 200; i++) {
    inputString[i] = ' ';
  }

  while (Serial.available() && !msgRcvd) {
    sb = Serial.read();

    if (sb == '<')
    {
      isCommandString = true;
      ClearInputString();
    }
    else if (sb == '>')
    {
      commandString = inputString;

      msgRcvd = true;
    }
    else if (isCommandString == true)
    {
      inputString[printIx] = sb;
      printLen++;
      printIx++;
    }
  } // end while

  if (msgRcvd)
  {
    commandString = commandString.substring(0, printIx);
    return true;
  }
  else
  {
    failString = inputString;
    return false;
  }

} // end function


void ClearInputString()
{
  int i;

  for (i = 0; i < 100; i++)
  {
    inputString[i] = ' ';
  }

  commandString = "";
  failString = "";
  printIx = 0;
  printLen = 0;
}

void print(String response) {
  printer.wake();
  printer.justify('C'); //center text
  printer.boldOn();
  printer.setSize('L'); //large font size
  printer.println(response);
  printer.println("                                        ");
  printer.wake();

}

//check if buttons have been pressed
void buttonPressed() {
  if (digitalRead(yesButton) == HIGH) {
    yesButtonPressed = true;
  }
  if (digitalRead(noButton) == HIGH) {
    noButtonPressed = true;
  }

  if (yesButtonPressed) {
    //Serial.write("{yesButtonPressed}");
    delay(500);
    yesButtonPressed = false;
  }
  if (noButtonPressed) {
    //Serial.write("{noButtonPressed}");
    delay(500);
    noButtonPressed = false;
  }

}

//SETUP RUNS ONCE
void setup() {
  //initialize console serial port
  Serial.begin(19200); //initialize console serial port
  mySerial.begin(19200); //initialize SoftwareSerial
  printer.begin(); //initialize printer

  //initialize hardware
  pinMode(siren, OUTPUT);
  pinMode(yesButton, INPUT_PULLUP);
  pinMode(noButton, INPUT_PULLUP);
}

//LOOP CONTINUALLY RUNS
void loop() {
  buttonPressed();
  if (tryReadSerialMsg())
  { // If data is available to read,
    // echo it back to the Serial Monitor...

    if (isCommandString)
    {
      Serial.print("command received : ");
      Serial.println(commandString);
    }
    else
    {
      //you read something that wasn't in brackets, or something failed....
      Serial.print("what happened ? ");
      Serial.println(failString);
    }
  }
  // delay(100);

  //do the command...
  if (isCommandString)
  {
    if (commandString.equals("Siren on"))
    {
      digitalWrite(siren, HIGH);

    }
    else if (commandString.equals("Siren off")) {
      digitalWrite(siren, LOW);
    }
    else if (commandString.startsWith("print: "))
    {
      String text = commandString.substring(commandString.indexOf(": ") + 2, commandString.length());
      print(text);
      Serial.print(text);
    }
  }

  isCommandString = false;
  failString = "";
  ClearInputString();
}
