#include "Adafruit_Thermal.h"
#include "SoftwareSerial.h"
#include "Adafruit_NeoPixel.h"

#define TX_PIN 6 //Arduino transit YELLOW wire labeled RX on printer
#define RX_PIN 5 //Arduino receive GREEN WIRE labeled TX on printer

SoftwareSerial mySerial(RX_PIN, TX_PIN); //Declare SoftwareSerial object
Adafruit_Thermal printer(&mySerial); //Pass address to printer constructor


//VARIABLES

//hardware
int sirenMotor = 34;
int sirenLight = 18;
int yesButton = 24;  
int noButton = 26;

boolean yesButtonPressed = false;
boolean noButtonPressed = false;

boolean yesButtonWasPressed = false;
boolean noButtonWasPressed = false; 

String commandString = "";
String failString = "";
char inputString[200];
int printIx = 0;
int printLen = 0;
boolean isCommandString = false;

//METHODS

// this routine reads a "command" - max length = 200;    Paul's protocol : put brackets [] around the command so we can recognize the start and end.... 
boolean tryReadSerialMsg () {
  char sb;   
  boolean msgRcvd = false; 
  isCommandString = false; 
  int i;
  for (i = 0; i < 200; i++) {
       inputString[i] = ' ';
  }

  while(Serial.available() && !msgRcvd) {
    sb = Serial.read();

      if (sb == '<')
      {
        isCommandString = true;
        ClearInputString();
      }
      else if (sb == '>')
      {
         commandString = inputString;
         
         msgRcvd = true;
      }
      else if (isCommandString == true)
      {
        inputString[printIx] = sb;
        printLen++;
        printIx++;
      }
      delay(10);
  } // end while

  if (msgRcvd)
  {
    commandString = commandString.substring(0,printIx);
    return true;
  }
  else
  {
    failString = inputString;
    return false;
 }

} // end function


void ClearInputString()
{
   int i;

   for (i = 0; i < 200; i++) 
   {
       inputString[i] = ' ';
   }
   
   commandString = "";
   failString = "";
   printIx = 0;
   printLen = 0;
}

void print(String response){
  printer.wake();
  printer.justify('C'); //center text
  printer.boldOn();
  printer.setSize('L'); //large font size
  printer.println(response);
  printer.println("                                                          ");
  printer.wake();
}



void setup() {
  //initialize console serial port
  Serial.begin(9600); //initialize console serial port, use 9600 so BT will work
  mySerial.begin(19200); //initialize SoftwareSerial
  printer.begin(); //initialize printer

  //initialize hardware
  pinMode(sirenMotor, OUTPUT);
  pinMode(sirenLight, OUTPUT);
  pinMode(yesButton, INPUT_PULLUP);
  pinMode(noButton, INPUT_PULLUP);   
  pinMode(13, OUTPUT);
}

void loop() {
    if (tryReadSerialMsg())      
    { // If data is available to read,
      // echo it back to the Serial Monitor... 
    
       if (isCommandString)
       {
           Serial.print("command received : "); 
           Serial.println(commandString); 
       } 
       else 
       {
          //you read something that wasn't in brackets, or something failed.... 
          Serial.print("what happened ? ");
          Serial.println(failString);
       }  
    }
    delay(100);

    //do the command...
    if (isCommandString)
    {
      if (commandString.equals("siren:off"))     //let's make our standard all lower case, with a colon after the "control word", like siren: or print:
      {
        digitalWrite(sirenMotor, HIGH);
        digitalWrite(sirenLight, LOW);
      }
      else if(commandString.equals("siren:on")){  //let's make our standard all lower case
        digitalWrite(sirenMotor, LOW);
        digitalWrite(sirenLight, HIGH);
      }
      else if (commandString.startsWith("print:"))
      {
        String text = commandString.substring(commandString.indexOf(":") + 1,commandString.length());
        digitalWrite(13, HIGH);
        print(text);
        digitalWrite(13, LOW);
       // Serial.println(text);

      }
    }

    //check if buttons have been pressed
    if(digitalRead(yesButton) == LOW){
      yesButtonPressed = true;

      if (!yesButtonWasPressed)
      {
        // the button just got pressed - send the "yes" message to brain ("carrick") via bluetooth ("roldan")
        Serial.println("<buttonpressed:yes>");
        yesButtonWasPressed = true;   // so it only sends once, not every time through the loop
      }
    }
    else 
    {
      yesButtonPressed == false;

      if (yesButtonWasPressed)
      {
        // we won't do anything when the button is released, but this is where we would if we cared.... 
        yesButtonWasPressed = false;
      }
    }

    
    if(digitalRead(noButton) == LOW){
      noButtonPressed = true;
      
      if (!noButtonWasPressed)
      {
        // the button just got pressed - send the "no" message to brain ("carrick") via bluetooth ("roldan")
        Serial.println("<buttonpressed:no>");
        noButtonWasPressed = true;   // so it only sends once, not every time through the loop
      }
    }
    else 
    {
      noButtonPressed == false;

      if (noButtonWasPressed)
      {
        // we won't do anything when the button is released, but this is where we would if we cared.... 
        noButtonWasPressed = false;
      }
    }

   isCommandString = false; 
   failString = "";
   ClearInputString();
}
